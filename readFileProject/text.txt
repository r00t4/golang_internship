History
Go was designed at Google in 2007 to improve programming productivity in an era of multicore, networked machines and large codebases.[23] The designers wanted to address criticism of other languages in use at Google, but keep their useful characteristics:[24]

Static typing and run-time efficiency (like C++)
Readability and usability (like Python or JavaScript)[25]
High-performance networking and multiprocessing
The designers were primarily motivated by their shared dislike of C++.[26][27][28]

Go was publicly announced in November 2009,[29] and version 1.0 was released in March 2012.[30][31] Go is widely used in production at Google[32] and in many other organizations and open-source projects.

In November 2016, the Go and Go Mono fonts which are sans-serif and monospaced respectively were released by type designers Charles Bigelow and Kris Holmes. Both were designed to be legible with a large x-height and distinct letterforms by conforming to the DIN 1450 standard.[33][34]

In April 2018, the original logo was replaced with a stylized GO slanting right with trailing streamlines. However, the Gopher mascot remained the same.[35]

In August 2018, the Go principal contributors published two ″draft designs″ for new language features, Generics and Error Handling, and asked Go users to submit feedback on them.[36][37] Lack of support for generic programming and the verbosity of Error Handling in Go 1.x had drawn considerable criticism.

Version history
Go 1 guarantees compatibility[38] for the language specification and major parts of the standard library. All versions up to the current Go 1.12 release[39] have maintained this promise.

Each major Go release is supported until there are two newer major releases.[40]

Design
Go is influenced by C, but with greater simplicity and safety. The language consists of:

A syntax and environment adopting patterns more common in dynamic languages:[44]
Optional concise variable declaration and initialization through type inference (x := 0 not int x = 0; or var x = 0;).
Fast compilation times.[45]
Remote package management (go get)[46] and online package documentation.[47]
Distinctive approaches to particular problems:
Built-in concurrency primitives: light-weight processes (goroutines), channels, and the select statement.
An interface system in place of virtual inheritance, and type embedding instead of non-virtual inheritance.
A toolchain that, by default, produces statically linked native binaries without external dependencies.
A desire to keep the language specification simple enough to hold in a programmer's head,[48] in part by omitting features which are common in similar languages.

Syntax
Go's syntax includes changes from C aimed at keeping code concise and readable. A combined declaration/initialization operator was introduced that allows the programmer to write i := 3 or s := "Hello, world!", without specifying the types of variables used. This contrasts with C's int i = 3; and const char *s = "Hello, world!";. Semicolons still terminate statements,[a] but are implicit when the end of a line occurs.[b] Functions may return multiple values, and returning a result, err pair is the conventional way a function indicates an error to its caller in Go.[c] Go adds literal syntaxes for initializing struct parameters by name, and for initializing maps and slices. As an alternative to C's three-statement for loop, Go's range expressions allow concise iteration over arrays, slices, strings, maps, and channels.[citation needed]

Types
Go has a number of built-in types, including numeric ones (byte, int64, float32, etc.), booleans, and character strings (string). Strings are immutable; built-in operators, and keywords (rather than functions) provide concatenation, comparison, and UTF-8 encoding/decoding.[51] Record types can be defined with the struct keyword.[52]

For each type T and each non-negative integer constant n, there is an array type denoted [n]T; arrays of differing lengths are thus of different types. Dynamic arrays are available as "slices", denoted []T for some type T. These have a length and a capacity specifying when new memory needs to be allocated to expand the array. Several slices may share their underlying memory.[53][54][55]

Pointers are available for all types, and the pointer-to-T type is denoted *T. Address-taking and indirection use the & and * operators as in C, or happen implicitly through the method call or attribute access syntax.[56] There is no pointer arithmetic,[d] except via the special unsafe.Pointer type in the standard library.[57]

For a pair of types K, V, the type map[K]V is the type of hash tables mapping type-K keys to type-V values. Hash tables are built into the language, with special syntax and built-in functions. chan T is a channel that allows sending values of type T between concurrent Go processes.[citation needed]

Aside from its support for interfaces, Go's type system is nominal: the type keyword can be used to define a new named type, which is distinct from other named types that have the same layout (in the case of a struct, the same members in the same order). Some conversions between types (e.g., between the various integer types) are pre-defined and adding a new type may define additional conversions, but conversions between named types must always be invoked explicitly.[58] For example, the type keyword can be used to define a type for IPv4 addresses, based on 32-bit unsigned integers:

type ipv4addr uint32
With this type definition, ipv4addr(x) interprets the uint32 value x as an IP address. Simply assigning x to a variable of type ipv4addr is a type error.[citation needed]

Constant expressions may be either typed or "untyped"; they are given a type when assigned to a typed variable if the value they represent passes a compile-time check.[59]

Function types are indicated by the func keyword; they take zero or more parameters and return zero or more values, all of which are typed. The parameter and return values determine a function type; thus, func(string, int32) (int, error) is the type of functions that take a string and a 32-bit signed integer, and return a signed integer (of default width) and a value of the built-in interface type error.[citation needed]

Any named type has a method set associated with it. The IP address example above can be extended with a method for checking whether its value is a known standard.

// ZeroBroadcast reports whether addr is 255.255.255.255.
func (addr ipv4addr) ZeroBroadcast() bool {
    return addr == 0xFFFFFFFF
}
Due to nominal typing, this method definition adds a method to ipv4addr, but not on uint32. While methods have special definition and call syntax, there is no distinct method type.[60]

Interface system
Go provides two features that replace class inheritance.[citation needed]

The first is embedding, which can be viewed as an automated form of composition[61] or delegation.[62]:255

The second are its interfaces, which provides runtime polymorphism.[63]:266 Interfaces are a class of types and provide a limited form of structural typing in the otherwise nominal type system of Go. An object which is of an interface type is also of another type, much like C++ objects being simultaneously of a base and derived class. Go interfaces were designed after protocols from the Smalltalk programming language.[64] Multiple sources use the term duck typing when describing Go interfaces.[65][66] Although the term duck typing is not precisely defined and therefore not wrong, it usually implies that type conformance is not statically checked. Since conformance to a Go interface is checked statically by the Go compiler (except when performing a type assertion), the Go authors prefer the term structural typing.[67]

The definition of an interface type lists required methods by name and type. Any object of type T for which functions exist matching all the required methods of interface type I is an object of type I as well. The definition of type T need not (and cannot) identify type I. For example, if Shape, Square and Circle are defined as:

import "math"

type Shape interface {
    Area() float64
}

type Square struct { // Note: no "implements" declaration
    side float64
}

func (sq Square) Area() float64 { return sq.side * sq.side }

type Circle struct { // No "implements" declaration here either
    radius float64
}

func (c Circle) Area() float64 { return math.Pi * math.Pow(c.radius, 2) }
Both a Square and a Circle are implicitly a Shape and can be assigned to a Shape-typed variable.[63]:263–268 In formal language, Go's interface system provides structural rather than nominal typing. Interfaces can embed other interfaces with the effect of creating a combined interface that is satisfied by exactly the types that implement the embedded interface and any methods that the newly defined interface adds.[63]:270

The Go standard library uses interfaces to provide genericity in several places, including the input/output system that is based on the concepts of Reader and Writer.[63]:282–283

Besides calling methods via interfaces, Go allows converting interface values to other types with a run-time type check. The language constructs to do so are the type assertion,[68] which checks against a single potential type, and the type switch,[69] which checks against multiple types.[citation needed]

The empty interface interface{} is an important base case because it can refer to an item of any concrete type. It is similar to the Object class in Java or C# and is satisfied by any type, including built-in types like int.[63]:284 Code using the empty interface cannot simply call methods (or built-in operators) on the referred-to object, but it can store the interface{} value, try to convert it to a more useful type via a type assertion or type switch, or inspect it with Go's reflect package.[70] Because interface{} can refer to any value, it is a limited way to escape the restrictions of static typing, like void* in C but with additional run-time type checks.[citation needed]

Interface values are implemented using pointer to data and a second pointer to run-time type information.[71] Like some other types implemented using pointers in Go, interface values are nil if uninitialized.[72]

Package system
In Go's package system, each package has a path (e.g., "compress/bzip2" or "golang.org/x/net/html") and a name (e.g., bzip2 or html). References to other packages' definitions must always be prefixed with the other package's name, and only the capitalized names from other packages are accessible: io.Reader is public but bzip2.reader is not.[73] The go get command can retrieve packages stored in a remote repository [74] and developers are encouraged to develop packages inside a base path corresponding to a source repository (such as example.com/user_name/package_name) to reduce the likelihood of name collision with future additions to the standard library or other external libraries.[75]

Proposals exist to introduce a proper package management solution for Go similar to Rust's cargo system or Node's npm system.[76]

Concurrency: goroutines and channels
The Go language has built-in facilities, as well as library support, for writing concurrent programs. Concurrency refers not only to CPU parallelism, but also to asynchrony: letting slow operations like a database or network-read run while the program does other work, as is common in event-based servers.[77]

The primary concurrency construct is the goroutine, a type of light-weight process. A function call prefixed with the go keyword starts a function in a new goroutine. The language specification does not specify how goroutines should be implemented, but current implementations multiplex a Go process's goroutines onto a smaller set of operating system threads, similar to the scheduling performed in Erlang.[78]:10

While a standard library package featuring most of the classical concurrency control structures (mutex locks, etc.) is available,[78]:151–152 idiomatic concurrent programs instead prefer channels, which provide send messages between goroutines.[79] Optional buffers store messages in FIFO order[62]:43 and allow sending goroutines to proceed before their messages are received.[citation needed]

Channels are typed, so that a channel of type chan T can only be used to transfer messages of type T. Special syntax is used to operate on them; <-ch is an expression that causes the executing goroutine to block until a value comes in over the channel ch, while ch <- x sends the value x (possibly blocking until another goroutine receives the value). The built-in switch-like select statement can be used to implement non-blocking communication on multiple channels; see below for an example. Go has a memory model describing how goroutines must use channels or other operations to safely share data.[80]

The existence of channels sets Go apart from actor model-style concurrent languages like Erlang, where messages are addressed directly to actors (corresponding to goroutines). The actor style can be simulated in Go by maintaining a one-to-one correspondence between goroutines and channels, but the language allows multiple goroutines to share a channel or a single goroutine to send and receive on multiple channels.[78]:147

From these tools one can build concurrent constructs like worker pools, pipelines (in which, say, a file is decompressed and parsed as it downloads), background calls with timeout, "fan-out" parallel calls to a set of services, and others.[81] Channels have also found uses further from the usual notion of interprocess communication, like serving as a concurrency-safe list of recycled buffers,[82] implementing coroutines (which helped inspire the name goroutine),[83] and implementing iterators.[84]

Concurrency-related structural conventions of Go (channels and alternative channel inputs) are derived from Tony Hoare's communicating sequential processes model. Unlike previous concurrent programming languages such as Occam or Limbo (a language on which Go co-designer Rob Pike worked),[85] Go does not provide any built-in notion of safe or verifiable concurrency.[86] While the communicating-processes model is favored in Go, it is not the only one: all goroutines in a program share a single address space. This means that mutable objects and pointers can be shared between goroutines; see § Lack of race condition safety, below.[citation needed]

Suitability for parallel programming
Although Go's concurrency features are not aimed primarily at parallel processing,[77] they can be used to program shared memory multi-processor machines. Various studies have been done into the effectiveness of this approach.[87] One of these studies compared the size (in lines of code) and speed of programs written by a seasoned programmer not familiar with the language and corrections to these programs by a Go expert (from Google's development team), doing the same for Chapel, Cilk and Intel TBB. The study found that the non-expert tended to write divide-and-conquer algorithms with one go statement per recursion, while the expert wrote distribute-work-synchronize programs using one goroutine per processor. The expert's programs were usually faster, but also longer.[88]

Lack of race condition safety
There are no restrictions on how goroutines access shared data, making race conditions possible. Specifically, unless a program explicitly synchronizes via channels or other means, writes from one goroutine might be partly, entirely, or not at all visible to another, often with no guarantees about ordering of writes.[86] Furthermore, Go's internal data structures like interface values, slice headers, hash tables, and string headers are not immune to race conditions, so type and memory safety can be violated in multithreaded programs that modify shared instances of those types without synchronization.[89][90] Instead of language support, safe concurrent programming thus relies on conventions; for example, Chisnall recommends an idiom called "aliases xor mutable", meaning that passing a mutable value (or pointer) over a channel signals a transfer of ownership over the value to its receiver.[78]:155

Binaries
The linker in the gc toolchain creates statically-linked binaries by default therefore all Go binaries include the Go runtime.[91][92]

Omissions
Go deliberately omits certain features common in other languages, including (implementation) inheritance, generic programming, assertions,[e] pointer arithmetic,[d] implicit type conversions, untagged unions,[f] and tagged unions.[g] The designers added only those facilities that all three agreed on.[95]

Of the omitted language features, the designers explicitly argue against assertions and pointer arithmetic, while defending the choice to omit type inheritance as giving a more useful language, encouraging instead the use of interfaces to achieve dynamic dispatch[h] and composition to reuse code. Composition and delegation are in fact largely automated by struct embedding; according to researchers Schmager et al., this feature "has many of the drawbacks of inheritance: it affects the public interface of objects, it is not fine-grained (i.e, no method-level control over embedding), methods of embedded objects cannot be hidden, and it is static", making it "not obvious" whether programmers will overuse it to the extent that programmers in other languages are reputed to overuse inheritance.[61]

The designers express an openness to generic programming and note that built-in functions are in fact type-generic, but these are treated as special cases; Pike calls this a weakness that may at some point be changed.[53] The Google team built at least one compiler for an experimental Go dialect with generics, but did not release it.[96] They are also open to standardizing ways to apply code generation.[97]

Initially omitted, the exception-like panic/recover mechanism was eventually added, which the Go authors advise using for unrecoverable errors such as those that should halt an entire program or server request, or as a shortcut to propagate errors up the stack within a package (but not across package boundaries; there, error returns are the standard API).[98][99][100][101]

Style

This section possibly contains original research. Please improve it by verifying the claims made and adding inline citations. Statements consisting only of original research should be removed. (January 2018) (Learn how and when to remove this template message)
The Go authors put substantial effort into influencing the style of Go programs:

Indentation, spacing, and other surface-level details of code are automatically standardized by the gofmt tool. golint does additional style checks automatically.
Tools and libraries distributed with Go suggest standard approaches to things like API documentation (godoc),[102] testing (go test), building (go build), package management (go get), and so on.
Go enforces rules that are recommendations in other languages, for example banning cyclic dependencies, unused variables or imports, and implicit type conversions.
The omission of certain features (for example, functional-programming shortcuts like map and Java-style try/finally blocks) tends to encourage a particular explicit, concrete, and imperative programming style.
On day one the Go team published a collection of Go idioms,[102] and later also collected code review comments,[103] talks,[104] and official blog posts[105] to teach Go style and coding philosophy.
Tools
The main Go distribution includes tools for building, testing, and analyzing code:

go build, which builds Go binaries using only information in the source files themselves, no separate makefiles
go test, for unit testing and microbenchmarks
go fmt, for formatting code
go get, for retrieving and installing remote packages
go vet, a static analyzer looking for potential errors in code
go run, a shortcut for building and executing code
godoc, for displaying documentation or serving it via HTTP
gorename, for renaming variables, functions, and so on in a type-safe way
go generate, a standard way to invoke code generators
It also includes profiling and debugging support, runtime instrumentation (for example, to track garbage collection pauses), and a race condition tester.

An ecosystem of third-party tools adds to the standard distribution, such as gocode, which enables code autocompletion in many text editors, goimports (by a Go team member), which automatically adds/removes package imports as needed, and errcheck, which detects code that might unintentionally ignore errors. Plugins exist for adding language support to several text editors. Several IDEs are available, including LiteIDE, a "simple, open source, cross-platform Go IDE",[106] and GoLand, which claims to be "capable and ergonomic."[107]

Examples
Hello world
package main

import "fmt"

func main() {
    fmt.Println("Hello, world")
}
where "fmt" is the package for formatted I/O, similar to C's C file input/output.[108]

Concurrency
The following simple program demonstrates Go's concurrency features to implement an asynchronous program. It launches two lightweight threads ("goroutines"): one waits for the user to type some text, while the other implements a timeout. The select statement waits for either of these goroutines to send a message to the main routine, and acts on the first message to arrive (example adapted from David Chisnall book).[78]:152

package main

import (
    "fmt"
    "time"
)

func readword(ch chan string) {
    fmt.Println("Type a word, then hit Enter.")
    var word string
    fmt.Scanf("%s", &word)
    ch <- word
}

func timeout(t chan bool) {
    time.Sleep(5 * time.Second)
    t <- false
}

func main() {
    t := make(chan bool)
    go timeout(t)

    ch := make(chan string)
    go readword(ch)

    select {
    case word := <-ch:
        fmt.Println("Received", word)
    case <-t:
        fmt.Println("Timeout.")
    }
}
Applications
Question book-new.svg
This section relies too much on references to primary sources. Please improve this section by adding secondary or tertiary sources. (November 2015) (Learn how and when to remove this template message)
Some notable open-source applications in Go include:[109]

Caddy, an open source HTTP/2 web server with automatic HTTPS capability.
CockroachDB, an open source, survivable, strongly consistent, scale-out SQL database.
Docker, a set of tools for deploying Linux containers
Ethereum, The go-ethereum implementation of the Ethereum Virtual Machine blockchain for the Ether cryptocurrency [110]
Hugo, a static site generator
InfluxDB, an open source database specifically to handle time series data with high availability and high performance requirements.
InterPlanetary File System, a content-addressable, peer-to-peer hypermedia protocol.[111]
Juju, a service orchestration tool by Canonical, packagers of Ubuntu Linux
Kubernetes container management system
Lightning Network, a bitcoin network that allows for fast Bitcoin transactions and scalability.[112]
Mattermost, a teamchat system
OpenShift, a cloud computing platform as a service by Red Hat
Snappy, a package manager for Ubuntu Touch developed by Canonical.
Syncthing, an open-source file synchronization client/server application
Terraform, an open-source, multiple cloud infrastructure provisioning tool from HashiCorp.
Other notable companies and sites using Go (generally together with other languages, not exclusively) include:

Cacoo, for their rendering of the user dashboard page and microservice using Go and gRPC.[113]
Chango, a programmatic advertising company uses Go in its real-time bidding systems.[114]
Cloud Foundry, a platform as a service[115]
CloudFlare, for their delta-coding proxy Railgun, their distributed DNS service, as well as tools for cryptography, logging, stream processing, and accessing SPDY sites.[116][117]
CoreOS, a Linux-based operating system that uses Docker containers[118] and rkt containers.
Couchbase, Query and Indexing services within the Couchbase Server[119]
Dropbox, who migrated some of their critical components from Python to Go[120]
Ethereum, a cryptocurrency[121]
Google, for many projects, notably including download server dl.google.com[122][123][124]
Heroku, for Doozer, a lock service[16]
Hyperledger Fabric, an open source, enterprise-focused distributed ledger project
MongoDB, tools for administering MongoDB instances[125]
Netflix, for two portions of their server architecture[126]
Novartis, for an internal inventory system[127]
Nutanix, for a variety of micro-services in its Enterprise Cloud OS.[128]
Plug.dj, an interactive online social music streaming website.[129]
SendGrid, a Boulder, Colorado-based transactional email delivery and management service.[130]
SoundCloud, for "dozens of systems"[131]
Splice, for the entire backend (API and parsers) of their online music collaboration platform.[132]
ThoughtWorks, some tools and applications for continuous delivery and instant messages (CoyIM).[133]
Twitch.tv, for their IRC-based chat system (migrated from Python).[134]
Uber, for handling high volumes of geofence-based queries.[135]
Reception
The interface system, and the deliberate omission of inheritance, were praised by Michele Simionato, who likened these characteristics to those of Standard ML, calling it "a shame that no popular language has followed [this] particular route".[136]

Dave Astels at Engine Yard wrote:[137]

Go is extremely easy to dive into. There are a minimal number of fundamental language concepts and the syntax is clean and designed to be clear and unambiguous.

Go is still experimental and still a little rough around the edges.

Go was named Programming Language of the Year by the TIOBE Programming Community Index in its first year, 2009, for having a larger 12-month increase in popularity (in only 2 months, after its introduction in November) than any other language that year, and reached 13th place by January 2010,[138] surpassing established languages like Pascal. By June 2015, its ranking had dropped to below 50th in the index, placing it lower than COBOL and Fortran.[139] But as of January 2017, its ranking had surged to 13th, indicating significant growth in popularity and adoption. Go was awarded TIOBE programming language of the year 2016.

Bruce Eckel has stated:[140]

The complexity of C++ (even more complexity has been added in the new C++), and the resulting impact on productivity, is no longer justified. All the hoops that the C++ programmer had to jump through in order to use a C-compatible language make no sense anymore -- they're just a waste of time and effort. Go makes much more sense for the class of problems that C++ was originally intended to solve.

A 2011 evaluation of the language and its gc implementation in comparison to C++ (GCC), Java and Scala by a Google engineer found:

Go offers interesting language features, which also allow for a concise and standardized notation. The compilers for this language are still immature, which reflects in both performance and binary sizes.

— R. Hundt[141]
The evaluation got a rebuttal from the Go development team. Ian Lance Taylor, who had improved the Go code for Hundt's paper, had not been aware of the intention to publish his code, and says that his version was "never intended to be an example of idiomatic or efficient Go"; Russ Cox then did optimize the Go code, as well as the C++ code, and got the Go code to run slightly faster than C++ and more than an order of magnitude faster than the code in the paper.[142]

Naming dispute
On November 10, 2009, the day of the general release of the language, Francis McCabe, developer of the Go! programming language (note the exclamation point), requested a name change of Google's language to prevent confusion with his language, which he had spent 10 years developing.[143] McCabe raised concerns that "the 'big guy' will end up steam-rollering over" him, and this concern resonated with the more than 120 developers who commented on Google's official issues thread saying they should change the name, with some[144] even saying the issue contradicts Google's motto of: Don't be evil.[145]

On October 12, 2010, the issue was closed by Google developer Russ Cox (@rsc) with the custom status "Unfortunate" accompanied by the following comment:

"There are many computing products and services named Go. In the 11 months since our release, there has been minimal confusion of the two languages."[145]

Criticism
Go critics assert that:

The lack of parametric polymorphism for generic programming leads to code duplication or unsafe type conversions and flow disrupting verbosity.[146][147][148][149]
Go's nil combined with the lack of algebraic types leads to difficulty handling failures and base cases.[146][148]
Formatting constraints imposed by the language, such as disallowing an opening curly brace to appear alone on its own line, are unusual for a language of its class, and burdensome to some developers.
The designers argue these omissions are simplifications that make the language better (See § Omissions above).[150]